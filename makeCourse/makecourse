#!/usr/bin/env python
import yaml
import os
import shutil
import sys
import re
import argparse
import errno
import makeCourse.process
import makeCourse.hackmd
from makeCourse import *
from distutils.dir_util import copy_tree
from subprocess import Popen, PIPE 


def purge(course_config, pattern,path=None):
	if path==None:
		path=course_config['args'].dir
	for f in os.listdir(path):
		if re.search(pattern, f):
			if course_config['args'].verbose:
				print '    Deleted: %s'%os.path.join(path, f)
			os.remove(os.path.join(path, f))
def purgeDir(course_config, pattern):
	for f in os.listdir(course_config['args'].dir):
		if re.search(pattern, f):
			if course_config['args'].verbose:
				print '    Deleted: %s'%os.path.join(course_config['args'].dir, f)
			shutil.rmtree(os.path.join(course_config['args'].dir, f))


def setDefaults(course_config):
	if 'themes_dir' not in course_config.keys():
		course_config['themes_dir'] = os.path.join(course_config['args'].dir,'themes')

	if 'static_dir' not in course_config.keys():
		course_config['static_dir'] = os.path.join(course_config['args'].dir,'static')

	if 'build_dir' not in course_config.keys():
		course_config['build_dir'] = os.path.join(course_config['args'].dir,'build')

	if 'theme' not in course_config.keys():
		course_config['theme'] = 'default'

	if 'web_dir' not in course_config.keys():
		course_config['web_dir'] = '/module/'+course_config['code']
		
	if course_config['web_dir'][-1] != os.sep:
		course_config['web_dir'] = course_config['web_dir'] + os.sep
		
	course_config['partsEnabled'] = False
	course_config['tempFiles'] = []

	if course_config['args'].verbose:
		print "The themes directory is: %s"%course_config['themes_dir']
		print "The static directory is: %s"%course_config['static_dir']
		print "The build directory is: %s"%course_config['build_dir']
		print "The web directory is: %s"%course_config['web_dir']

def cleanUp(course_config):
	if course_config['args'].verbose:
		print "Cleaning up temporary files"
	for temp_file in course_config['tempFiles']:
		try:
			os.remove(os.path.join(course_config['args'].dir,temp_file))
		except OSError:
			shutil.rmtree(os.path.join(course_config['args'].dir,temp_file))
		if course_config['args'].verbose:
			print '    Deleted: %s'%temp_file

	if course_config['args'].verbose:
		print "Cleaning up any missed files"
	purge(course_config,r'.+?\.paux',path='.')
	purge(course_config, r'[0-9a-f]{4}-.*?\.md')
	purgeDir(course_config, r'[0-9a-f]{4}-.*?')

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('-v', dest='verbose', action='store_true',help='verbose output')
	parser.add_argument('-vv', dest='veryverbose', action='store_true',help='very verbose output')
	parser.add_argument('-d', dest='deleteFirst', action='store_true',help='delete temporary files first')
	parser.add_argument('-l', dest='lazy', action='store_true',help='don\'t delete temporary files when finished')
	parser.add_argument('dir', help='a course definition directory')
	args = parser.parse_args()
	
	if args.veryverbose:
		args.verbose = True

	if args.verbose:
		print "Running makecourse for directory %s"%args.dir
		print "Reading %s..."%os.path.join(args.dir,'config.yml')

	with open(os.path.join(args.dir,'config.yml'), 'r') as f:
		course_config = yaml.load(f)
	course_config['args'] = args

	if 'configFile' in course_config.keys():
		realConfig = makeCourse.hackmd.getHackmdDocument(course_config,course_config['configFile'])
		realConfig = re.sub(r'^---.*?---\n','',realConfig,flags=re.S)
		course_config = yaml.load(realConfig)
		course_config['args'] = args
	
	setDefaults(course_config)

	if course_config['args'].deleteFirst:
		cleanUp(course_config)

	if course_config['args'].verbose:
		print "Creating build directory..."
	mkdir_p(os.path.join(course_config['build_dir'],'static'))

	if course_config['args'].verbose:
		print "Creating static directory..."
	mkdir_p(course_config['static_dir'])

	if course_config['args'].verbose:
		print "Starting processing..."

	makeCourse.process.doProcess(course_config)
	
	if course_config['args'].verbose:
		print "Running epilogue..."

	srcPath = os.path.join(course_config['themes_dir'],course_config['theme'],'static')
	dstpath = os.path.join(course_config['build_dir'],'static')
	if args.verbose:
		print "Copying Theme's static directory to the build directory..."
		print "    %s => %s"%(srcPath,dstpath)
	try:
		copy_tree(srcPath, dstpath)
	except:
		sys.stderr.write("Warning: Problem copying Theme's static directory")
		pass

	if course_config['args'].verbose:
		print "Copying Course's static directory to the build directory..."
	srcPath = os.path.join(course_config['static_dir'])
	dstpath = os.path.join(course_config['build_dir'],'static')
	if course_config['args'].verbose:
		print "    %s => %s"%(srcPath,dstpath)
	try:
		copy_tree(srcPath, dstpath)
	except:
		sys.stderr.write("Warning: Problem copying Course's static directory!\n")
		pass
	
	if not course_config['args'].lazy:
		cleanUp(course_config)
		
	print "All done! Output written to %s"%course_config['build_dir']
if __name__ == "__main__":
	main()
