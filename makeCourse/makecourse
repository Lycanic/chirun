#!/usr/bin/env python
import argparse
import errno
import logging
import makeCourse.hackmd
import makeCourse.process
import os
import re
import shutil
import sys
import yaml
from distutils.dir_util import copy_tree
from makeCourse import *
from subprocess import Popen, PIPE 

logger = logging.getLogger('makeCourse')

def purge(course_config, pattern,path=None):
	if path==None:
		path=course_config['args'].dir
	for f in os.listdir(path):
		if re.search(pattern, f):
			logger.info('    Deleted: %s'%os.path.join(path, f))
			os.remove(os.path.join(path, f))
def purgeDir(course_config, pattern):
	for f in os.listdir(course_config['args'].dir):
		if re.search(pattern, f):
			logger.info('    Deleted: %s'%os.path.join(course_config['args'].dir, f))
			shutil.rmtree(os.path.join(course_config['args'].dir, f))


def setDefaults(course_config):
	if 'themes_dir' not in course_config.keys():
		course_config['themes_dir'] = os.path.join(course_config['args'].dir,'themes')

	if 'static_dir' not in course_config.keys():
		course_config['static_dir'] = os.path.join(course_config['args'].dir,'static')

	if 'build_dir' not in course_config.keys():
		course_config['build_dir'] = os.path.join(course_config['args'].dir,'build')

	if 'theme' not in course_config.keys():
		course_config['theme'] = 'default'

	if 'web_dir' not in course_config.keys():
		course_config['web_dir'] = '/module/'+course_config['code']
		
	if course_config['web_dir'][-1] != '/':
		course_config['web_dir'] = course_config['web_dir'] + '/'
		
	course_config['partsEnabled'] = False
	course_config['tempFiles'] = []

	logger.info("The themes directory is: %s"%course_config['themes_dir'])
	logger.info("The static directory is: %s"%course_config['static_dir'])
	logger.info("The build directory is: %s"%course_config['build_dir'])
	logger.info("The web directory is: %s"%course_config['web_dir'])

def cleanUp(course_config):
	logger.info("Cleaning up temporary files")
	for temp_file in course_config['tempFiles']:
		try:
			os.remove(os.path.join(course_config['args'].dir,temp_file))
		except OSError:
			shutil.rmtree(os.path.join(course_config['args'].dir,temp_file))
		logger.info('    Deleted: %s'%temp_file)

	logger.info("Cleaning up any missed files")
	purge(course_config,r'.+?\.paux',path='.')
	purge(course_config, r'[0-9a-f]{4}-.*?\.md')
	purgeDir(course_config, r'[0-9a-f]{4}-.*?')

def main():


	parser = argparse.ArgumentParser()
	parser.add_argument('-v', dest='verbose', action='store_true',help='verbose output')
	parser.add_argument('-vv', dest='veryverbose', action='store_true',help='very verbose output')
	parser.add_argument('-d', dest='deleteFirst', action='store_true',help='delete temporary files first')
	parser.add_argument('-l', dest='lazy', action='store_true',help='don\'t delete temporary files when finished')
	parser.add_argument('--no-pdf', dest='build_pdf', action='store_false',help='don\'t build PDF')
	parser.add_argument('--theme', dest='theme', help='Name of the theme to use')
	parser.add_argument('--config', dest='config_file', help='Path to config file')
	parser.add_argument('dir', help='a course definition directory', default='.', nargs='?')
	args = parser.parse_args()
	
	if args.veryverbose:
		args.verbose = True

	if args.verbose:
		if args.veryverbose:
			logging.basicConfig(level=logging.DEBUG, format='%(path): %(levelname)s:\t%(message)s\n')
		else:
			logging.basicConfig(level=logging.INFO, format='%(message)s\n')
	else:
		logging.basicConfig(level=logging.WARN, format='%(levelname)s: %(message)s\n')

	if args.config_file:
		config_file = args.config_file
	else:
		config_file = os.path.join(args.dir, 'config.yml')

	logger.info("Running makecourse for directory %s"%args.dir)
	logger.info("Reading %s..."% config_file)

	with open(config_file, 'r') as f:
		course_config = yaml.load(f)
	course_config['args'] = args

	if 'configFile' in course_config.keys():
		realConfig = makeCourse.hackmd.getHackmdDocument(course_config,course_config['configFile'])
		realConfig = re.sub(r'^---.*?---\n','',realConfig,flags=re.S)
		course_config = yaml.load(realConfig)
		course_config['args'] = args
	
	setDefaults(course_config)

	if course_config['args'].deleteFirst:
		cleanUp(course_config)

	course_config['build_pdf'] = args.build_pdf

	if args.theme:
		course_config['theme'] = args.theme

	logger.info("Creating build directory...")
	mkdir_p(os.path.join(course_config['build_dir'],'static'))

	logger.info("Creating static directory...")
	mkdir_p(course_config['static_dir'])

	logger.info("Starting processing...")

	makeCourse.process.doProcess(course_config)
	
	logger.info("Running epilogue...")

	srcPath = os.path.join(course_config['themes_dir'],course_config['theme'],'static')
	dstpath = os.path.join(course_config['build_dir'],'static')
	logger.info("Copying Theme's static directory to the build directory...")
	logger.info("    %s => %s"%(srcPath,dstpath))
	try:
		copy_tree(srcPath, dstpath)
	except:
		sys.stderr.write("Warning: Problem copying Theme's static directory")
		pass

	logger.info("Copying Course's static directory to the build directory...")
	srcPath = os.path.join(course_config['static_dir'])
	dstpath = os.path.join(course_config['build_dir'],'static')
	logger.info("    %s => %s"%(srcPath,dstpath))
	try:
		copy_tree(srcPath, dstpath)
	except:
		sys.stderr.write("Warning: Problem copying Course's static directory!\n")
		pass
	
	if not course_config['args'].lazy:
		cleanUp(course_config)
		
	print("All done! Output written to %s"%course_config['build_dir'])
if __name__ == "__main__":
	main()
