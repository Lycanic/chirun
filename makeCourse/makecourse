#!/usr/bin/env python
import argparse
import datetime
import errno
import logging
import makeCourse.plastex
import makeCourse.process
import makeCourse.pandoc
import makeCourse.latex
import makeCourse.decktape
import os
import re
import shutil
import sys
import yaml
from distutils.dir_util import copy_tree
from makeCourse import *
import makeCourse
from makeCourse.theme import *
from pathlib import Path
from subprocess import Popen, PIPE

logger = logging.getLogger('makeCourse')


class MakeCourse:

    mathjax_url = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML'

    def __init__(self, args):
        self.args = args

        self.root_dir = self.get_root_dir()

        if args.veryverbose:
            args.verbose = True

        if args.verbose:
            if args.veryverbose:
                logging.basicConfig(level=logging.DEBUG, format='%(filename)s:%(lineno)d: %(levelname)s:\t%(message)s')
            else:
                logging.basicConfig(level=logging.INFO, format='%(message)s')
        else:
            logging.basicConfig(level=logging.WARN, format='%(levelname)s: %(message)s\n')

        print("Running makecourse for directory {}".format(self.get_root_dir().resolve()))

    def get_root_dir(self):
        return Path(self.args.dir)

    def get_themes_dir(self):
        return Path(self.config['themes_dir'])

    def get_build_dir(self):
        return self.get_root_dir() / 'build' / self.theme.path

    def get_static_dir(self):
        return Path(self.config['static_dir'])

    def get_local_root(self):
        return self.config['local_root']

    def get_web_root(self):
        if self.args.local:
            return self.get_local_root()
        else:
            if 'base_dir' in self.config and norm_base != '.' and norm_base != '/':
                norm_base = os.path.normpath(self.config.get('base_dir'))
                root = '/' + norm_base
            else:
                root = '/module'
            code = self.config.get('code')
            year = self.config.get('year')
            if code:
                root += '/' + self.config.get('code', '')
            if year:
                root += '/' + self.config.get('year', '')
            root += '/'
            return root

    def setup_build_for_theme(self, theme):
        self.theme = theme

    def default_config(self):
        root_dir = self.get_root_dir()
        config = {
            'themes_dir': root_dir / 'themes',
            'static_dir': root_dir / 'static',
            'partsEnabled': False,
            'build_pdf': True,
            'year': str(datetime.datetime.now().year),
            'local_root': os.getcwd() + '/' + 'build' + '/'
        }
        return config

    def find_theme(self, name):
        return self.get_themes_dir() / name

    def get_config_file(self):
        if self.args.config_file:
            return self.args.config_file
        else:
            return str(self.get_root_dir() / 'config.yml')

    def load_config(self):
        config_file = self.get_config_file()

        logger.info("Reading config file {}".format(config_file))

        with open(config_file, 'r') as f:
            config = self.loaded_config = yaml.load(f)

        config['args'] = self.args

        self.config = self.default_config()
        self.config.update(self.loaded_config)

        self.load_themes()

    def load_themes(self):
        self.themes = [Theme(self, theme) for theme in self.config['themes']]

    def cleanup(self):
        logger.info("Cleaning up temporary files")

        try:
            shutil.rmtree(str(self.get_root_dir() / 'tmp'))
        except OSError:
            pass

    def make_directories(self):
        logger.info("Creating build directory...")
        mkdir_p(self.get_build_dir())
        mkdir_p(self.get_build_dir() / 'static')


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', dest='verbose', action='store_true', help='verbose output')
    parser.add_argument('-vv', dest='veryverbose', action='store_true', help='very verbose output')
    parser.add_argument('-d', dest='deleteFirst', action='store_true', help='delete temporary files first')
    parser.add_argument('-z', dest='lazy', action='store_true', help='don\'t delete latex aux files when finished')
    parser.add_argument('-l', dest='local', action='store_true', help='create with local file paths')
    parser.add_argument('--config', dest='config_file', help='Path to config file')
    parser.add_argument('dir', help='a course definition directory', default='.', nargs='?')
    parser.set_defaults(build_pdf=None)
    args = parser.parse_args()

    return args


def main():
    args = parse_args()

    extensions = [
        makeCourse.plastex.PlastexRunner,
        makeCourse.process.CourseProcessor,
        makeCourse.pandoc.PandocRunner,
        makeCourse.decktape.DecktapeRunner,
    ]

    class Builder(MakeCourse, *extensions):
        pass

    mc = Builder(args)

    mc.load_config()

    if args.deleteFirst:
        mc.cleanup()

    for theme in mc.themes:
        theme.build()

    if not mc.args.lazy:
        mc.cleanup()

    print("All done! Output written to {}".format(mc.get_build_dir()))


if __name__ == "__main__":
    main()
